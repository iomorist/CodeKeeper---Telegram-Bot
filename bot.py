import os
import logging
import sqlite3
from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, ConversationHandler
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
ITEMS_PER_PAGE = 5

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SUBJECT, LAB_NUMBER, VARIANT, CODE = range(4)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_data = {}

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('lab_codes.db')
    c = conn.cursor()
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    c.execute('''
        CREATE TABLE IF NOT EXISTS codes
        (id INTEGER PRIMARY KEY AUTOINCREMENT,
         subject TEXT NOT NULL,
         lab_number TEXT NOT NULL,
         variant TEXT NOT NULL,
         code TEXT NOT NULL,
         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
    ''')
    conn.commit()
    conn.close()

def add_code_to_db(subject: str, lab_number: str, variant: str, code: str) -> bool:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('lab_codes.db')
        c = conn.cursor()
        c.execute('''
            INSERT INTO codes (subject, lab_number, variant, code) 
            VALUES (?, ?, ?, ?)
        ''', (subject, lab_number, variant, code))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞ –≤ –ë–î: {e}")
        return False

def get_codes_page(page: int) -> tuple:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–¥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('lab_codes.db')
        c = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        c.execute('SELECT COUNT(*) FROM codes')
        total_count = c.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        offset = (page - 1) * ITEMS_PER_PAGE
        c.execute('SELECT id, subject, lab_number, variant, code FROM codes ORDER BY id LIMIT ? OFFSET ?', 
                 (ITEMS_PER_PAGE, offset))
        codes = c.fetchall()
        conn.close()
        
        total_pages = (total_count + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
        return codes, total_pages
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–æ–≤ –∏–∑ –ë–î: {e}")
        return [], 0

def get_all_codes_from_db() -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–¥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('lab_codes.db')
        c = conn.cursor()
        c.execute('SELECT id, subject, lab_number, variant, code FROM codes ORDER BY id')
        codes = c.fetchall()
        conn.close()
        return codes
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–æ–≤ –∏–∑ –ë–î: {e}")
        return []

def delete_code_from_db(lab_id: int) -> bool:
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ ID"""
    try:
        conn = sqlite3.connect('lab_codes.db')
        c = conn.cursor()
        c.execute('DELETE FROM codes WHERE id = ?', (lab_id,))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–¥–∞ –∏–∑ –ë–î: {e}")
        return False

def get_code_from_db(lab_id: int) -> tuple:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –ø–æ ID –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π"""
    try:
        conn = sqlite3.connect('lab_codes.db')
        c = conn.cursor()
        c.execute('''
            SELECT id, subject, lab_number, variant, code 
            FROM codes 
            WHERE id = ?
        ''', (lab_id,))
        result = c.fetchone()
        conn.close()
        return result
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞ –∏–∑ –ë–î: {e}")
        return None

def update_code_in_db(lab_id: int, new_code: str) -> bool:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –ø–æ ID –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π"""
    try:
        conn = sqlite3.connect('lab_codes.db')
        c = conn.cursor()
        c.execute('UPDATE codes SET code = ? WHERE id = ?', (new_code, lab_id))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞ –≤ –ë–î: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–æ–≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç.\n\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥\n'
        '/list - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–¥—ã\n'
        '/edit <–Ω–æ–º–µ—Ä> <–Ω–æ–≤—ã–π_–∫–æ–¥> - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É\n'
        '/delete <–Ω–æ–º–µ—Ä> - –£–¥–∞–ª–∏—Ç—å –∫–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É\n'
        '/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥ (–ø–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥)\n"
        "/list - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–¥—ã\n"
        "/edit <–Ω–æ–º–µ—Ä> <–Ω–æ–≤—ã–π_–∫–æ–¥> - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É\n"
        "/delete <–Ω–æ–º–µ—Ä> - –£–¥–∞–ª–∏—Ç—å –∫–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞ (/add) –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏:\n"
        "1. –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞\n"
        "2. –ù–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã\n"
        "3. –í–∞—Ä–∏–∞–Ω—Ç\n"
        "4. –°–∞–º –∫–æ–¥\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "/edit 1 print('New code')\n"
        "/delete 1"
    )
    await update.message.reply_text(help_text)

async def add_code_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞"""
    await update.message.reply_text(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:'
    )
    return SUBJECT

async def add_subject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
    user_data[update.effective_user.id] = {'subject': update.message.text}
    await update.message.reply_text(
        '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã:'
    )
    return LAB_NUMBER

async def add_lab_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π"""
    user_data[update.effective_user.id]['lab_number'] = update.message.text
    await update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:'
    )
    return VARIANT

async def add_variant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
    user_data[update.effective_user.id]['variant'] = update.message.text
    await update.message.reply_text(
        '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã:'
    )
    return CODE

async def add_code_final(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞"""
    user_id = update.effective_user.id
    data = user_data.get(user_id, {})
    
    if not data:
        await update.message.reply_text(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /add'
        )
        return ConversationHandler.END
    
    code = update.message.text
    
    if add_code_to_db(data['subject'], data['lab_number'], data['variant'], code):
        await update.message.reply_text(
            f'‚úÖ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n'
            f'–ü—Ä–µ–¥–º–µ—Ç: {data["subject"]}\n'
            f'–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è: {data["lab_number"]}\n'
            f'–í–∞—Ä–∏–∞–Ω—Ç: {data["variant"]}'
        )
    else:
        await update.message.reply_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_data.pop(user_id, None)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞"""
    user_id = update.effective_user.id
    user_data.pop(user_id, None)
    await update.message.reply_text(
        '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.'
    )
    return ConversationHandler.END

async def edit_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit"""
    try:
        _, lab_id, *code_parts = update.message.text.split(' ', 2)
        new_code = code_parts[0] if code_parts else ''
        
        if not new_code:
            await update.message.reply_text(
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –ø–æ—Å–ª–µ –Ω–æ–º–µ—Ä–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã.\n'
                '–ü—Ä–∏–º–µ—Ä: /edit 1 print("New code")'
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–¥
        lab_data = get_code_from_db(int(lab_id))
        if not lab_data:
            await update.message.reply_text(f'‚ùå –ö–æ–¥ —Å –Ω–æ–º–µ—Ä–æ–º {lab_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return

        if update_code_in_db(int(lab_id), new_code):
            await update.message.reply_text(f'‚úÖ –ö–æ–¥ –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã "{lab_data[1]}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')
        else:
            await update.message.reply_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    except (ValueError, IndexError):
        await update.message.reply_text(
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n'
            '/edit <–Ω–æ–º–µ—Ä> <–Ω–æ–≤—ã–π_–∫–æ–¥>'
        )

async def delete_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete"""
    try:
        _, lab_id = update.message.text.split(' ', 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–¥
        lab_data = get_code_from_db(int(lab_id))
        if not lab_data:
            await update.message.reply_text(f'‚ùå –ö–æ–¥ —Å –Ω–æ–º–µ—Ä–æ–º {lab_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return

        if delete_code_from_db(int(lab_id)):
            await update.message.reply_text(f'‚úÖ –ö–æ–¥ –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã "{lab_data[1]}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!')
        else:
            await update.message.reply_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    except (ValueError, IndexError):
        await update.message.reply_text(
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n'
            '/delete <–Ω–æ–º–µ—Ä>'
        )

def create_pagination_keyboard(page: int, total_pages: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"page_{page-1}"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"page_{page+1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    codes, _ = get_codes_page(page)
    for lab_id, subject, lab_number, variant, _ in codes:
        keyboard.append([InlineKeyboardButton(f"üìù {subject} - –õ–∞–±. {lab_number} –í–∞—Ä–∏–∞–Ω—Ç {variant}", callback_data=f"show_{lab_id}")])
    
    return InlineKeyboardMarkup(keyboard)

async def list_codes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list"""
    subjects = get_subjects()
    if not subjects:
        await update.message.reply_text('üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤.')
    else:
        message = 'üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:'
        keyboard = create_subjects_keyboard()
        await update.message.reply_text(message, reply_markup=keyboard)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_subjects":
        message = 'üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:'
        keyboard = create_subjects_keyboard()
        await query.message.edit_text(message, reply_markup=keyboard)
    
    elif query.data.startswith('subject_'):
        subject = query.data.split('_')[1]
        message = f'üìö –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "{subject}":'
        keyboard = create_labs_keyboard(subject)
        await query.message.edit_text(message, reply_markup=keyboard)
    
    elif query.data.startswith('show_'):
        lab_id = int(query.data.split('_')[1])
        lab_data = get_code_from_db(lab_id)
        
        if lab_data:
            message = (
                f'üìù –ü—Ä–µ–¥–º–µ—Ç: {lab_data[1]}\n'
                f'–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è: {lab_data[2]}\n'
                f'–í–∞—Ä–∏–∞–Ω—Ç: {lab_data[3]}\n'
                f'–ö–æ–¥:\n```\n{lab_data[4]}\n```'
            )
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º", callback_data=f"subject_{lab_data[1]}")]]
            await query.message.edit_text(message, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await query.message.edit_text('‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.')

def get_subjects() -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    try:
        conn = sqlite3.connect('lab_codes.db')
        c = conn.cursor()
        c.execute('SELECT DISTINCT subject FROM codes ORDER BY subject')
        subjects = [row[0] for row in c.fetchall()]
        conn.close()
        return subjects
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")
        return []

def get_labs_by_subject(subject: str) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É"""
    try:
        conn = sqlite3.connect('lab_codes.db')
        c = conn.cursor()
        c.execute('''
            SELECT id, lab_number, variant, code 
            FROM codes 
            WHERE subject = ? 
            ORDER BY lab_number, variant
        ''', (subject,))
        labs = c.fetchall()
        conn.close()
        return labs
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç: {e}")
        return []

def create_subjects_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    keyboard = []
    subjects = get_subjects()
    for subject in subjects:
        keyboard.append([InlineKeyboardButton(f"üìö {subject}", callback_data=f"subject_{subject}")])
    return InlineKeyboardMarkup(keyboard)

def create_labs_keyboard(subject: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç"""
    keyboard = []
    labs = get_labs_by_subject(subject)
    for lab_id, lab_number, variant, _ in labs:
        keyboard.append([InlineKeyboardButton(
            f"üìù –õ–∞–±. {lab_number} –í–∞—Ä–∏–∞–Ω—Ç {variant}", 
            callback_data=f"show_{lab_id}"
        )])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data="back_to_subjects")])
    return InlineKeyboardMarkup(keyboard)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ —Ñ–∞–π–ª–µ .env")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()

    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞
    add_code_handler = ConversationHandler(
        entry_points=[CommandHandler('add', add_code_start)],
        states={
            SUBJECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_subject)],
            LAB_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_lab_number)],
            VARIANT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_variant)],
            CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_code_final)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(add_code_handler)
    application.add_handler(CommandHandler("edit", edit_code))
    application.add_handler(CommandHandler("delete", delete_code))
    application.add_handler(CommandHandler("list", list_codes))
    application.add_handler(CallbackQueryHandler(handle_callback))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 